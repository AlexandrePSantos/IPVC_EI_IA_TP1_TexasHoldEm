-------------------action.py:

--> EN <--
Contains an Enum class named TexasAction, which represents the possible actions for Texas Hold'em poker.

FOLD represents the action of folding the hand.
CHECK represents the action of not betting.
CALL represents the action of matching the opponent's bet.
RAISE represents the action of increasing the bet.
BET represents the action of betting.
----\\----

--> PT <--
Contem uma class Enum TexasAction, que representa as possiveis jogadas para um jogo de Texas Hold'em poker.

FOLD representa a ação de desistir da mão.
CHECK representa a ação de não apostar.
CALL representa a ação de igualar a aposta do adversário.
RAISE representa a ação de aumentar a aposta.
BET representa a ação de apostar.
----\\----
----\\----

-------------------card.py:

--> EN <--
Contains an Enum class named TexasCard, which represents a standard deck of cards for Texas Hold'em poker. The class has 52 members,
each representing a unique card in the deck. Each card is identified by a value between 0 and 51, which is stored in the value attribute of each member.

The TexasCard class defines two methods:
->>    __lt__(self, other): This method is used to define the less-than comparison between two TexasCard instances. 
    It compares the value attributes of the two instances to determine which one is less than the other.
->>    __str__(self): This method returns a string representation of the TexasCard instance, which consists of the rank and suit of the card. 
    The rank is determined by the rank_names dictionary, which maps the card's value modulo 13 to a rank name ("2" through "A"). 
    The suit is determined by the suit_names dictionary, which maps the card's value integer divided by 13 to a suit name ("hearts", "diamonds", "clubs", "spades"). 
    The rank and suit are concatenated to form the string representation of the card.
----\\----

--> PT <--
Contem uma classe Enum chamada TexasCard, que representa um baralho padrão de cartas para o jogo de poker Texas Hold'em.
A classe tem 52 elementos, cada um representando uma carta única do baralho. Cada carta é identificada por um valor entre 0 e 51, que é armazenado no atributo de valor de cada elemento.

A classe TexasCard define dois métodos:

->>     __lt__(self, other): Este método é usado para definir a comparação de menor-que entre duas instâncias de TexasCard. 
    Ele compara os atributos de valor das duas instâncias para determinar qual é menor que a outra.
->>     __str__(self): Este método retorna uma representação em string da instância de TexasCard, que consiste no valor e no naipe da carta. 
    O valor é determinado pelo dicionário rank_names, que mapeia o valor da carta módulo 13 para um nome de valor ("2" a "A"). 
    O naipe é determinado pelo dicionário suit_names, que mapeia o valor inteiro da carta dividido por 13 para um nome de naipe ("copas", "ouros", "paus", "espadas"). 
    O valor e o naipe são concatenados para formar a representação em string da carta.
----\\----
----\\----

-------------------player.py:

--> EN <--
Contains a class named TexasPlayer which inherits from the abstract base class Player and from the abstract base class ABC. It also imports the List and TexasCard types from other modules.

The TexasPlayer class has an initializer (__init__ method) that sets the name of the player and initializes the private instance variables __score, __num_games, and __current_hand.
The class has methods for setting and getting the current hand of the player, getting the score of the player, getting the expected value of the player, and printing the statistics of the player.
The event_new_game method increments the number of games for the player when a new game starts, and the event_result method updates the score of the player when a game ends.
Finally, the print_stats method prints the name of the player, the total profit earned or lost by the player, and the profit per game for the player in a formatted string.
----\\----

--> PT <--
Contem uma class chamada TexasPlayer que herda da classe abstrata base Player e da classe abstrata base ABC. Ela também importa os tipos List e TexasCard de outros módulos.

A classe TexasPlayer tem um inicializador (init método) que define o nome do jogador e inicializa as variáveis de instância privadas __score, __num_games e __current_hand.
A classe tem métodos para definir e obter a mão atual do jogador, obter a pontuação do jogador, obter o valor esperado do jogador e imprimir as estatísticas do jogador.
O método event_new_game incrementa o número de jogos para o jogador quando um novo jogo começa, e o método event_result atualiza a pontuação do jogador quando um jogo termina.
Por fim, o método print_stats imprime o nome do jogador, o lucro total obtido ou perdido pelo jogador e o lucro por jogo para o jogador em uma string formatada.
----\\----
----\\----

-------------------simulator.py:

--> EN <--
This code implements the TexasSimulator class, which is a simulator for the Texas Hold'em game with two players.
The class inherits from GameSimulator, an abstract class that defines the basic functionalities of a game simulator.

The class has a constructor that receives two TexasPlayer objects as a parameter and a private variable __deck that contains the deck of cards.
The init_game() method is responsible for initializing the game, shuffling the deck, dealing two cards to each player, and three cards to the table.
    The method returns a TexasState object that represents the current state of the game.

The before_end_game() method is called before the game ends and is responsible for revealing the cards of all players if the game has ended,
    a player has folded, or it is the last betting round.
    The method iterates over all players and calls the draw_card() method of TexasState to reveal their cards.
The end_game() method is called when the game ends and is ignored in this simulator.
----\\----

--> PT <--
Este código implementa a classe TexasSimulator, que é um simulador para o jogo Texas Hold'em com dois jogadores.
A classe herda de GameSimulator, uma classe abstrata que define as funcionalidades básicas de um simulador de jogo.

A classe possui um construtor que recebe dois objetos TexasPlayer como parâmetro e uma variável privada __deck que contém as cartas do baralho.
O método init_game() é responsável por inicializar o jogo, embaralhando o baralho, distribuindo duas cartas para cada jogador e três cartas para a mesa.
    O método retorna um objeto TexasState que representa o estado atual do jogo.

O método before_end_game() é chamado antes do jogo terminar e é responsável por revelar as cartas de todos os jogadores caso o jogo tenha acabado,
    um jogador tenha desistido ou seja a última rodada de apostas.
    O método itera sobre todos os jogadores e chama o método draw_card() de TexasState para revelar suas cartas.
O método end_game() é chamado quando o jogo termina e é ignorado neste simulador.
----\\----
----\\----

-------------------state.py:

--> EN <--

----\\----

--> PT <--

----\\----
----\\----